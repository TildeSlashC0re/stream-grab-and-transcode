#!/bin/bash
source config

notify()
{
    if [ ! -z "$APPRISE_HOOK_TARGET" ]; then
        head -c 1950 |
            ls -qsh1 out/$srcstring raw-src/$srcstring |
            sed 's/\x1b\[[0-9;]*m//g' |
            sed -e "1s/^/\`\`\`nginx\\n/" -e "\$s/\$/\`\`\`/" |
            apprise -t "$NOTIFY_ENCODE_FINISHED" "$APPRISE_HOOK_TARGET";
        else
            true
    fi
}

jobscomplete()
{
    echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
    printf -- "- - - - - - - - - - - - ${HIGHLIGHT}J O B   F I N I S H E D${NC} - - - - - - - - - - \n"
    echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
    printf "\n\ncheck ${HIGHLIGHT}out/$srcstring${NC} for the goodies!\n\n" >> $LOGDIR/ffmpeg.log
    echo "waiting for new job. . ." >> $LOGDIR/ffmpeg.log;
}

logrotate ()
{
    cat $LOGDIR/ffmpeg.log >> $LOGDIR/ffmpeg.log.old;
    printf "\nsee ${HIGHLIGHT}$LOGDIR/ffmpeg.log.old${NC} for completed jobs!\n\n" > $LOGDIR/ffmpeg.log
}



pipe=$WORKDIR/ffmpeg-queue
trap "rm -f $pipe;" EXIT

logrotate;

# creating the FIFO
[[ -p $pipe ]] || mkfifo $pipe

while true; do
    # can't just use "while read line" if we
    # want this script to continue running.
    read line < $pipe

    # now implementing a bit of security,
    # feel free to improve it.
    # we ensure that the command is a ffmpeg one.
    [[ $line =~ ^ffmpeg ]] && bash <<< "$line"
    logrotate;
    notify;
    jobscomplete >> $LOGDIR/ffmpeg.log
done
