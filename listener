#!/bin/bash
source config 2>/dev/null
ARG1=$1

# Go to end-sequence on CTRL-C
trap rollcredits SIGINT SIGTERM

intro() {
    clear
    printf -- "$HIGHLIGHT"
    printf -- "  .|'''.|   ..|'''.|      |     |''||''| \n"
    printf -- "  ||..  '  .|'     '     |||       ||    \n"
    printf -- "   ''|||.  ||    ....   |  ||      ||    \n"
    printf -- " .     '|| '|.    ||   .''''|.     ||    \n"
    printf -- " |'....|'   ''|...'|  .|.  .||.   .||.   \n${NC}"
    printf -- " - - - - - - - -[ _ _ _ ] - - - - - - - -"
    sleep 2s;
}

##
## Declare functions
##

# Various messages
lineprint()
{
    printf -- "\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"
}

saygoodbye()
{
    sleep 1s;
    lineprint
    printf "${HIGHLIGHT}bye${NC}!"
    lineprint
}

# Inform user of script re-run
loop_end_message()
{
    sleep 2s;
            printf "${HIGHLIGHT}listening once more${NC} ☜(ﾟヮﾟ☜)!\n"
            echo "- - - - - - - - - - - - - - - - - - - - - -"
            echo "- - - - - - N E W       J O B - - - - - - -"
            echo "- - - - - - - - - - - - - - - - - - - - - -"
}

# basic sanity checks ... config provided? WORKDIR defined? STREAM defined?
basicsanity()
{
    if [ ! -f ./config ]; then
        lineprint
        printf "${HIGHLIGHT}N O   C O N F I G   F O U N D${NC}!   » » »   S E E   ${HIGHLIGHT}R E A D M E . m d ${NC}"
        lineprint
        exit 2;
    fi

    if [ -z "$WORKDIR" ]; then
        lineprint
        printf "P L E A S E   ${HIGHLIGHT}D E F I N E   W O R K D I R${NC}   I N   ${HIGHLIGHT}. / C O N F I G${NC}"
        lineprint
        exit 2;
    fi

    if [ -z "$STREAM" ]; then
        trap "saygoodbye; exit 0" SIGINT
        lineprint
        printf "${HIGHLIGHT}No \$STREAM${NC} in ${HIGHLIGHT}./config${NC} defined!\nPlease provide a stream to grab now:\n"
        read -p "" STREAM
        if [ -z "$STREAM" ]; then
            lineprint
            echo "No stream provided. Exiting!";
            saygoodbye
            exit 1
        else
            if streamlink --can-handle-url $STREAM 2>/dev/null; then
                true
            else
                echo "Incompatible stream provided. Exiting!";
                saygoodbye
                exit 1 
            fi
        fi
    fi


}

restreamflag() {
    lineprint
    printf -- "\n- - - - - - - R E S T R E A M   F L A G   ${HIGHLIGHT}A C T I V E ${NC}! - - - - - -"
}

restreamkeycheck() {
if [ -z "$RESTREAM_ENDPOINT_KEY" ]; then
        lineprint
        printf "Provide your ${HIGHLIGHT}keys${NC} please!${NC}\n"
        read -p "" RESTREAM_ENDPOINT_KEY
            if [ -z "$RESTREAM_ENDPOINT_KEY" ]; then
                printf "No ${HIGHLIGHT}keys${NC} no ${HIGHLIGHT}restream!${NC}\n"
                saygoodbye; exit 0
            else
                restreamflag
            fi
    else
        restreamflag
    fi
}

restreamcheck() {
    trap "saygoodbye; exit 0" SIGINT SIGTERM
    clear
    if [ ! "$RESTREAM" = "true" ]; then
        true
    else
        if [ -z "$RESTREAM_ENDPOINT" ]; then
            lineprint
            printf "No ${HIGHLIGHT}\$RESTREAM_ENDPOINT${NC} in ${HIGHLIGHT}./config${NC} defined! Please provide a ${HIGHLIGHT}rtmp://${NC} target to restream to now:\n"
            read -p "" RESTREAM_ENDPOINT
                if [ -z "$RESTREAM_ENDPOINT" ]; then
                    lineprint
                    echo "No endpoint provided, will continue without restreaming the source!"
                else
                    restreamkeycheck
                fi
        else
            restreamkeycheck
        fi
    fi
}

restream() {
    streamlink --config config.streamlink $STREAM -O 2>> $LOGDIR/$DATE.log | tee $WORKDIR/src/$srcstring/$DATE.mp4 | transcode >> $LOGDIR/$DATE.log 2>&1;
}

transcode() {
    ffmpeg -hide_banner -re -i - $TRANSCODER_FLAGS -movflags frag_keyframe+empty_moov -f flv $RESTREAM_ENDPOINT/$RESTREAM_ENDPOINT_KEY
}

# Truncate $STREAM for something more handy. Define $srcstring. Use that as an identifier.
contain-instance() {
    srcstring="${STREAM?need a string}" # receive input in first argument
    srcstring="${srcstring//[^[:alnum:]]/}"     # replace all non-alnum characters to -
    srcstring="${srcstring//+(-)/-}"            # convert multiple - to single -
    srcstring="${srcstring/#-}"                 # remove - from start
    srcstring="${srcstring/#https}"             # remove "https" from start
    srcstring="${srcstring/comwatchv/_}"        # YouTube underscore 
    srcstring="${srcstring/streamme/streamme_}" # StreamMe underscore
    srcstring="${srcstring/#www}"               # remove "www" from start
    srcstring="${srcstring/%-}"                 # remove - from end
    srcstring="${srcstring,,}"
    srcstring="$srcstring"
    mkdir -p src/$srcstring
    export srcstring=$srcstring
}

argument(){
    if [ -z "$ARG1" ]; then
        true
    else
        if streamlink --can-handle-url $ARG1 2>/dev/null; then
            STREAM=$ARG1
            true
        else
            lineprint
            echo "Incompatible stream provided. Exiting!";
            saygoodbye
            exit 1 
        fi
    fi
}

# Remove 0byte files recursively inside WORKDIR, remove empty directories inside WORKDIR.
cleanup_0byte()
{
    find . -type f \( -not -name "ffmpeg.log" \) -size 0 -print0 | xargs -I{} -0 rm {};
    find . -type d -empty -delete;
}

# Log output to console
log_encoder()
{
    lineprint
    printf "${HIGHLIGHT}ffmpeg${NC} log:"
    lineprint
    tail -F -n 10 $LOGDIR/ffmpeg.log 2>/dev/null;
}

log_listener()
{
    touch $LOGDIR/$DATE.log
    lineprint
    printf "${HIGHLIGHT}streamlink${NC} log:"
    lineprint
    printf "\n"
    tail -F $LOGDIR/$DATE.log 2>/dev/null &
}

# End log output to console
kill_log_encoder()
{
    kill $(pgrep -f "^(tail -F.*$LOGDIR/ffmpeg.log).*$") 2>/dev/null
}

kill_log_listener()
{
    kill $(pgrep -f "^(tail -F.*$LOGDIR/$DATE).*$") 2>/dev/null
}


# End-sequence
rollcredits()
{
    kill_log_listener;
    runjobs;
    log_encoder;
    menu;
}

# Exit screen
menu()
{
    clear
    trap menu SIGINT SIGTERM
    lineprint
    printf "Do you want to ${HIGHLIGHT}kill the scheduler${NC}?"
    lineprint
    printf "${HIGHLIGHT}[warning!]${NC} this will ${HIGHLIGHT}abort pending jobs${NC}!"
    lineprint
    kill_log_encoder;
    select yn in "Yes" "No" "Show Log"; do
        case $yn in
            Yes ) kill_log_encoder; killjobs; pkill scheduler; cleanup_0byte; saygoodbye; exit 0;;
            No ) cleanup_0byte; saygoodbye; exit 0;;
            Show\ Log ) log_encoder; menu;;
        esac
    done
}

# FFMPEG queue pipe
runscheduler()
{
    if ! pgrep -x "scheduler" > /dev/null
        then
            setsid nohup ./scheduler >/dev/null 2>&1 &
            printf "\n\n${HIGHLIGHT}ffmpeg-scheduler${NC} started ${HIGHLIGHT}in background.${NC}\n"
        else
            printf "\n\n${HIGHLIGHT}ffmpeg-scheduler${NC} already running.${NC}\n"
    fi
}

# Provide timestamp per job
timestamp()
{
    DATE="$(date +%m_%d_%Y-%H:%M:%S-%s)"
    printf "\n\nwill write temporary output to: \n\nsrc/$srcstring/${HIGHLIGHT}"$DATE"${NC}.mp4\n";
    if [ ! "$RESTREAM" = "true" ]; then
        true
    else
        lineprint
        printf "\nRestreaming to: ${HIGHLIGHT}"$RESTREAM_ENDPOINT"${NC}\n";
    fi
}

# Streamlink
streamlink_listen()
{
    if [ -z "$PLAYER" ];
            then
                lineprint
                printf -- "- - - - - R U N N I N G   I N   ${HIGHLIGHT}H E A D L E S S   M O D E${NC} - - - - -"
                lineprint

                streamlink --config config.streamlink $STREAM -o $WORKDIR/src/$srcstring/$DATE.mp4 > $LOGDIR/$DATE.log 2>&1;
            else
                streamlink --config config.streamlink $STREAM -O 2>> $LOGDIR/$DATE.log | tee $WORKDIR/src/$srcstring/$DATE.mp4 | $PLAYER - $PLAYER_OPTIONS >> $LOGDIR/$DATE.log 2>&1;
    fi
}

# Send jobs to FFMPEG queue
runjobs()
{
    clear
    cleanup_0byte;
    setsid nohup ./encoder > /dev/null 2>&1 &
    lineprint
    printf "${HIGHLIGHT}scheduled job${NC} for src/$srcstring/${HIGHLIGHT}$DATE${NC}.mp4!"
    lineprint
}

notify()
{
    if [ ! -z "$APPRISE_HOOK_TARGET" ]; then
        if grep -E -q 'Available' $LOGDIR/$DATE.log
            then
                cat $LOGDIR/$DATE.log |
                sed 's/\x1b\[[0-9;]*m//g' |
                sed -e "1s/^/\`\`\`arm\\n/" -e "\$s/\$/\`\`\`/" |
                apprise -t "$NOTIFY_STREAM_LIVE" "$APPRISE_HOOK_TARGET"; 
            else
                sleep 2s;
                notify;
        fi
        else
            true
    fi
}

# Kill a running FFMPEG job
killjobs()
{
    kill $(pgrep -f "^(ffmpeg -y -i.*.mp4.-hide_banner).*$") >/dev/null 2>&1 &
}

# That main-function really tied the room together.
main()
{
    trap rollcredits SIGINT SIGTERM
    while true; do
        cd $WORKDIR
        timestamp;
        log_listener;
        if [ "$RESTREAM" = "true" ]; then
            restream
        else
            notify &
            streamlink_listen
        fi
        runjobs;
        loop_end_message;
    done
}

##
## Roll the script!
##
intro;
basicsanity;
argument;
contain-instance;
runscheduler;
restreamcheck;
main

